// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph.IndustryData
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Industry Data Run.
    /// </summary>
    [JsonConverter(typeof(Microsoft.Graph.DerivedTypeConverter<IndustryDataRun>))]
    public partial class IndustryDataRun : Microsoft.Graph.Entity
    {
    
        /// <summary>
        /// Gets or sets blocking error.
        /// An error object to diagnose critical failures in the run.
        /// </summary>
        [JsonPropertyName("blockingError")]
        public Microsoft.Graph.PublicError BlockingError { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// The name of the run for rendering in a user interface.
        /// </summary>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets end date time.
        /// The date and time when the run finished or null if the run is still in-progress. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [JsonPropertyName("endDateTime")]
        public DateTimeOffset? EndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets start date time.
        /// The date and time when the run started. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [JsonPropertyName("startDateTime")]
        public DateTimeOffset? StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets status.
        /// The current status of the run. The possible values are: running, failed, completed, completedWithErrors, completedWithWarnings, unknownFutureValue.
        /// </summary>
        [JsonPropertyName("status")]
        public IndustryDataRunStatus? Status { get; set; }
    
        /// <summary>
        /// Gets or sets activities.
        /// The set of activities performed during the run.
        /// </summary>
        [JsonPropertyName("activities")]
        public IIndustryDataRunActivitiesCollectionPage Activities { get; set; }

        /// <summary>
        /// Gets or sets activitiesNextLink.
        /// </summary>
        [JsonPropertyName("activities@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string ActivitiesNextLink { get; set; }
    
    }
}

