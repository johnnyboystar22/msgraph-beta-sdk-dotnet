// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type ObjectMapping.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<ObjectMapping>))]
    public partial class ObjectMapping
    {

        /// <summary>
        /// Gets or sets attributeMappings.
        /// Attribute mappings define which attributes to map from the source object into the target object and how they should flow. A number of functions are available to support the transformation of the original source values.
        /// </summary>
        [JsonPropertyName("attributeMappings")]
        public IEnumerable<AttributeMapping> AttributeMappings { get; set; }
    
        /// <summary>
        /// Gets or sets enabled.
        /// When true, this object mapping will be processed during synchronization. When false, this object mapping will be skipped.
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get; set; }
    
        /// <summary>
        /// Gets or sets flowTypes.
        /// Which flow types are enabled for this object mapping. Add creates new objects in the target directory, Update modifies existing objects, and Delete deprovisions existing users. The default is Add, Update, Delete.
        /// </summary>
        [JsonPropertyName("flowTypes")]
        public ObjectFlowTypes? FlowTypes { get; set; }
    
        /// <summary>
        /// Gets or sets metadata.
        /// Additional extension properties. Unless mentioned explicitly, metadata values should not be changed.
        /// </summary>
        [JsonPropertyName("metadata")]
        public IEnumerable<ObjectMappingMetadataEntry> Metadata { get; set; }
    
        /// <summary>
        /// Gets or sets name.
        /// Human-friendly name of the object mapping.
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }
    
        /// <summary>
        /// Gets or sets scope.
        /// Defines a filter to be used when deciding whether a given object should be provisioned. For example, you might want to only provision users that are located in the US.
        /// </summary>
        [JsonPropertyName("scope")]
        public Filter Scope { get; set; }
    
        /// <summary>
        /// Gets or sets sourceObjectName.
        /// Name of the object in the source directory. Must match the object name from the source directory definition.
        /// </summary>
        [JsonPropertyName("sourceObjectName")]
        public string SourceObjectName { get; set; }
    
        /// <summary>
        /// Gets or sets targetObjectName.
        /// Name of the object in target directory. Must match the object name from the target directory definition.
        /// </summary>
        [JsonPropertyName("targetObjectName")]
        public string TargetObjectName { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
