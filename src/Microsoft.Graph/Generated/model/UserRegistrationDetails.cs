// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type User Registration Details.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<UserRegistrationDetails>))]
    public partial class UserRegistrationDetails : Entity
    {
    
        /// <summary>
        /// Gets or sets default mfa method.
        /// The method the user or admin selected as default for performing multi-factor authentication for the user. The possible values are: none, mobilePhone, alternateMobilePhone, officePhone, microsoftAuthenticatorPush, softwareOneTimePasscode, unknownFutureValue.
        /// </summary>
        [JsonPropertyName("defaultMfaMethod")]
        public DefaultMfaMethodType? DefaultMfaMethod { get; set; }
    
        /// <summary>
        /// Gets or sets is admin.
        /// Indicates whether the user has an admin role in the tenant. This value can be used to check the authentication methods that privileged accounts are registered for and capable of.
        /// </summary>
        [JsonPropertyName("isAdmin")]
        public bool? IsAdmin { get; set; }
    
        /// <summary>
        /// Gets or sets is mfa capable.
        /// Indicates whether the user has registered a strong authentication method for multi-factor authentication. The method must be allowed by the authentication methods policy. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isMfaCapable")]
        public bool? IsMfaCapable { get; set; }
    
        /// <summary>
        /// Gets or sets is mfa registered.
        /// Indicates whether the user has registered a strong authentication method for multi-factor authentication. The method may not necessarily be allowed by the authentication methods policy. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isMfaRegistered")]
        public bool? IsMfaRegistered { get; set; }
    
        /// <summary>
        /// Gets or sets is passwordless capable.
        /// Indicates whether the user has registered a passwordless strong authentication method (including FIDO2, Windows Hello for Business, and Microsoft Authenticator (Passwordless)) that is allowed by the authentication methods policy. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isPasswordlessCapable")]
        public bool? IsPasswordlessCapable { get; set; }
    
        /// <summary>
        /// Gets or sets is sspr capable.
        /// Indicates whether the user has registered the required number of authentication methods for self-service password reset and the user is allowed to perform self-service password reset by policy. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isSsprCapable")]
        public bool? IsSsprCapable { get; set; }
    
        /// <summary>
        /// Gets or sets is sspr enabled.
        /// Indicates whether the user is allowed to perform self-service password reset by policy. The user may not necessarily have registered the required number of authentication methods for self-service password reset. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isSsprEnabled")]
        public bool? IsSsprEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets is sspr registered.
        /// Indicates whether the user has registered the required number of authentication methods for self-service password reset. The user may not necessarily be allowed to perform self-service password reset by policy. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isSsprRegistered")]
        public bool? IsSsprRegistered { get; set; }
    
        /// <summary>
        /// Gets or sets is system preferred authentication method enabled.
        /// Indicates whether system preferred authentication method is enabled. If enabled, the system dynamically determines the most secure authentication method among the methods registered by the user. Supports $filter (eq).
        /// </summary>
        [JsonPropertyName("isSystemPreferredAuthenticationMethodEnabled")]
        public bool? IsSystemPreferredAuthenticationMethodEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets last updated date time.
        /// The date and time (UTC) when the record was last updated. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [JsonPropertyName("lastUpdatedDateTime")]
        public DateTimeOffset? LastUpdatedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets methods registered.
        /// Collection of authentication methods registered, such as mobilePhone, email, fido2. Supports $filter (any with eq).
        /// </summary>
        [JsonPropertyName("methodsRegistered")]
        public IEnumerable<string> MethodsRegistered { get; set; }
    
        /// <summary>
        /// Gets or sets system preferred authentication methods.
        /// Collection of authentication methods that the system determined to be the most secure authentication methods among the registered methods for second factor authentication. Possible values are: push, oath, voiceMobile, voiceAlternateMobile, voiceOffice, sms, none, unknownFutureValue. Supports $filter (any with eq).
        /// </summary>
        [JsonPropertyName("systemPreferredAuthenticationMethods")]
        public IEnumerable<string> SystemPreferredAuthenticationMethods { get; set; }
    
        /// <summary>
        /// Gets or sets user display name.
        /// The user display name, such as Adele Vance. Supports $filter (eq, startsWith) and $orderby.
        /// </summary>
        [JsonPropertyName("userDisplayName")]
        public string UserDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets user preferred method for secondary authentication.
        /// The method the user selected as the default second-factor for performing multi-factor authentication. Possible values are: push, oath, voiceMobile, voiceAlternateMobile, voiceOffice, sms, none, unknownFutureValue.
        /// </summary>
        [JsonPropertyName("userPreferredMethodForSecondaryAuthentication")]
        public UserDefaultAuthenticationMethod? UserPreferredMethodForSecondaryAuthentication { get; set; }
    
        /// <summary>
        /// Gets or sets user principal name.
        /// The user principal name, such as AdeleV@contoso.com. Supports $filter (eq, startsWith) and $orderby.
        /// </summary>
        [JsonPropertyName("userPrincipalName")]
        public string UserPrincipalName { get; set; }
    
        /// <summary>
        /// Gets or sets user type.
        /// Identifies whether the user is a member or guest in the tenant. The possible values are: member, guest, unknownFutureValue.
        /// </summary>
        [JsonPropertyName("userType")]
        public SignInUserType? UserType { get; set; }
    
    }
}

