// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Privilege Management Elevation.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<PrivilegeManagementElevation>))]
    public partial class PrivilegeManagementElevation : Entity
    {
    
        /// <summary>
        /// Gets or sets certificate payload.
        /// The certificate payload of the application. This is computed by hashing the certificate information on the client. Example: `32c220482c68413fbf8290e3b1e49b0a85901cfcd62ab0738760568a2a6e8a50`
        /// </summary>
        [JsonPropertyName("certificatePayload")]
        public string CertificatePayload { get; set; }
    
        /// <summary>
        /// Gets or sets company name.
        /// The company name of the application. This value is set by the creator of the application. Example: `Microsoft Corporation`
        /// </summary>
        [JsonPropertyName("companyName")]
        public string CompanyName { get; set; }
    
        /// <summary>
        /// Gets or sets device id.
        /// The Intune deviceId. Unique identifier for the managed device. Example: `92ce5047-9553-4731-817f-9b401a999a1b`
        /// </summary>
        [JsonPropertyName("deviceId")]
        public string DeviceId { get; set; }
    
        /// <summary>
        /// Gets or sets device name.
        /// The name associated with the device in the intune database. Example: `JOHNDOE-LAPTOP`.
        /// </summary>
        [JsonPropertyName("deviceName")]
        public string DeviceName { get; set; }
    
        /// <summary>
        /// Gets or sets elevation type.
        /// Indicates the type of elevation on the application. Possible values are `undetermined`, `unmanagedElevation`, `zeroTouchElevation`, `userConfirmedElevation`, and `supportApprovedElevation`. Defaults to `undetermined`
        /// </summary>
        [JsonPropertyName("elevationType")]
        public PrivilegeManagementElevationType? ElevationType { get; set; }
    
        /// <summary>
        /// Gets or sets event date time.
        /// The date and time when the application was elevated. Example:`2014-01-01T00:00:00Z`
        /// </summary>
        [JsonPropertyName("eventDateTime")]
        public DateTimeOffset? EventDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets file description.
        /// The file description of the application. This value is set by the creator of the application. Example: `Editor of multiple coding languages.`
        /// </summary>
        [JsonPropertyName("fileDescription")]
        public string FileDescription { get; set; }
    
        /// <summary>
        /// Gets or sets file path.
        /// The full file path of the application including the filename and file extension. Example: `C:\Program Files\vscode.exe`
        /// </summary>
        [JsonPropertyName("filePath")]
        public string FilePath { get; set; }
    
        /// <summary>
        /// Gets or sets file version.
        /// The version of the application. This value is set by the creator of the application. Example: `6.2211.1035.1000`
        /// </summary>
        [JsonPropertyName("fileVersion")]
        public string FileVersion { get; set; }
    
        /// <summary>
        /// Gets or sets hash.
        /// The sha256 hash of the application. Example: `32c220482c68413fbf8290e3b1e49b0a85901cfcd62ab0738760568a2a6e8a57`
        /// </summary>
        [JsonPropertyName("hash")]
        public string Hash { get; set; }
    
        /// <summary>
        /// Gets or sets internal name.
        /// The internal name of the application. This value is set by the creator of the application. Example: `VS code`
        /// </summary>
        [JsonPropertyName("internalName")]
        public string InternalName { get; set; }
    
        /// <summary>
        /// Gets or sets justification.
        /// The justification to elevate the application. This is an input by the user when the privilegeManagementElevationType is of type userConfirmedElevation or support approved elevation. This will be null in all other scenarios. The length is capped at 256 char, enforced on the client side. Example: `To install debug tool.`.
        /// </summary>
        [JsonPropertyName("justification")]
        public string Justification { get; set; }
    
        /// <summary>
        /// Gets or sets product name.
        /// The product name of the application. This value is set by the creator of the application. Example: `Visual Studio`
        /// </summary>
        [JsonPropertyName("productName")]
        public string ProductName { get; set; }
    
        /// <summary>
        /// Gets or sets result.
        /// The result of the elevation action with 0 being success, and everything else being exit code if the elevation was unsuccessful. The value will always be 0 on all unmanaged elevation. Example: `0`. Valid values 0 to 2147483647
        /// </summary>
        [JsonPropertyName("result")]
        public Int32? Result { get; set; }
    
        /// <summary>
        /// Gets or sets upn.
        /// The User Principal Name of the user who performed the elevation. Example: `john@domain.com`
        /// </summary>
        [JsonPropertyName("upn")]
        public string Upn { get; set; }
    
        /// <summary>
        /// Gets or sets user type.
        /// The type of account performed the elevation on Windows. Possible values are: `undetermined`, `azureAd`, `hybrid`, and `local`. Defaults to `undetermined`.
        /// </summary>
        [JsonPropertyName("userType")]
        public PrivilegeManagementEndUserType? UserType { get; set; }
    
    }
}

