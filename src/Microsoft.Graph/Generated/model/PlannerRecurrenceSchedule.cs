// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type PlannerRecurrenceSchedule.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<PlannerRecurrenceSchedule>))]
    public partial class PlannerRecurrenceSchedule
    {

        /// <summary>
        /// Gets or sets nextOccurrenceDateTime.
        /// The next date for this schedule. When a new task is instantiated to continue the recurrence series, this date is used for the dueDateTime of the new plannerTask. Auto-generated by the service. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
        /// </summary>
        [JsonPropertyName("nextOccurrenceDateTime")]
        public DateTimeOffset? NextOccurrenceDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets pattern.
        /// The pattern for recurrence. Required.
        /// </summary>
        [JsonPropertyName("pattern")]
        public RecurrencePattern Pattern { get; set; }
    
        /// <summary>
        /// Gets or sets patternStartDateTime.
        /// The start date for the recurrence pattern. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
        /// </summary>
        [JsonPropertyName("patternStartDateTime")]
        public DateTimeOffset? PatternStartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
