// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Default Managed App Protection.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<DefaultManagedAppProtection>))]
    public partial class DefaultManagedAppProtection : ManagedAppProtection
    {
    
        ///<summary>
        /// The DefaultManagedAppProtection constructor
        ///</summary>
        public DefaultManagedAppProtection()
        {
            this.ODataType = "microsoft.graph.defaultManagedAppProtection";
        }

        /// <summary>
        /// Gets or sets allowed android device manufacturers.
        /// Semicolon seperated list of device manufacturers allowed, as a string, for the managed app to work. (Android only)
        /// </summary>
        [JsonPropertyName("allowedAndroidDeviceManufacturers")]
        public string AllowedAndroidDeviceManufacturers { get; set; }
    
        /// <summary>
        /// Gets or sets allowed android device models.
        /// List of device models allowed, as a string, for the managed app to work. (Android Only)
        /// </summary>
        [JsonPropertyName("allowedAndroidDeviceModels")]
        public IEnumerable<string> AllowedAndroidDeviceModels { get; set; }
    
        /// <summary>
        /// Gets or sets allowed ios device models.
        /// Semicolon seperated list of device models allowed, as a string, for the managed app to work. (iOS Only)
        /// </summary>
        [JsonPropertyName("allowedIosDeviceModels")]
        public string AllowedIosDeviceModels { get; set; }
    
        /// <summary>
        /// Gets or sets app action if account is clocked out.
        /// Defines a managed app behavior, either block or warn, if the user is clocked out (non-working time). Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfAccountIsClockedOut")]
        public ManagedAppRemediationAction? AppActionIfAccountIsClockedOut { get; set; }
    
        /// <summary>
        /// Gets or sets app action if android device manufacturer not allowed.
        /// Defines a managed app behavior, either block or wipe, if the specified device manufacturer is not allowed. (Android only). Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfAndroidDeviceManufacturerNotAllowed")]
        public ManagedAppRemediationAction? AppActionIfAndroidDeviceManufacturerNotAllowed { get; set; }
    
        /// <summary>
        /// Gets or sets app action if android device model not allowed.
        /// Defines a managed app behavior, either block or wipe, if the specified device model is not allowed. (Android Only). Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfAndroidDeviceModelNotAllowed")]
        public ManagedAppRemediationAction? AppActionIfAndroidDeviceModelNotAllowed { get; set; }
    
        /// <summary>
        /// Gets or sets app action if android safety net apps verification failed.
        /// Defines a managed app behavior, either warn or block, if the specified Android App Verification requirement fails. Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfAndroidSafetyNetAppsVerificationFailed")]
        public ManagedAppRemediationAction? AppActionIfAndroidSafetyNetAppsVerificationFailed { get; set; }
    
        /// <summary>
        /// Gets or sets app action if android safety net device attestation failed.
        /// Defines a managed app behavior, either warn or block, if the specified Android SafetyNet Attestation requirement fails. Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfAndroidSafetyNetDeviceAttestationFailed")]
        public ManagedAppRemediationAction? AppActionIfAndroidSafetyNetDeviceAttestationFailed { get; set; }
    
        /// <summary>
        /// Gets or sets app action if device lock not set.
        /// Defines a managed app behavior, either warn, block or wipe, if the screen lock is required on device but is not set. (android only). Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfDeviceLockNotSet")]
        public ManagedAppRemediationAction? AppActionIfDeviceLockNotSet { get; set; }
    
        /// <summary>
        /// Gets or sets app action if device passcode complexity less than high.
        /// If the device does not have a passcode of high complexity or higher, trigger the stored action. Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfDevicePasscodeComplexityLessThanHigh")]
        public ManagedAppRemediationAction? AppActionIfDevicePasscodeComplexityLessThanHigh { get; set; }
    
        /// <summary>
        /// Gets or sets app action if device passcode complexity less than low.
        /// If the device does not have a passcode of low complexity or higher, trigger the stored action. Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfDevicePasscodeComplexityLessThanLow")]
        public ManagedAppRemediationAction? AppActionIfDevicePasscodeComplexityLessThanLow { get; set; }
    
        /// <summary>
        /// Gets or sets app action if device passcode complexity less than medium.
        /// If the device does not have a passcode of medium complexity or higher, trigger the stored action. Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfDevicePasscodeComplexityLessThanMedium")]
        public ManagedAppRemediationAction? AppActionIfDevicePasscodeComplexityLessThanMedium { get; set; }
    
        /// <summary>
        /// Gets or sets app action if ios device model not allowed.
        /// Defines a managed app behavior, either block or wipe, if the specified device model is not allowed. (iOS Only). Possible values are: block, wipe, warn.
        /// </summary>
        [JsonPropertyName("appActionIfIosDeviceModelNotAllowed")]
        public ManagedAppRemediationAction? AppActionIfIosDeviceModelNotAllowed { get; set; }
    
        /// <summary>
        /// Gets or sets app data encryption type.
        /// Type of encryption which should be used for data in a managed app. (iOS Only). Possible values are: useDeviceSettings, afterDeviceRestart, whenDeviceLockedExceptOpenFiles, whenDeviceLocked.
        /// </summary>
        [JsonPropertyName("appDataEncryptionType")]
        public ManagedAppDataEncryptionType? AppDataEncryptionType { get; set; }
    
        /// <summary>
        /// Gets or sets biometric authentication blocked.
        /// Indicates whether use of the biometric authentication is allowed in place of a pin if PinRequired is set to True. (Android Only)
        /// </summary>
        [JsonPropertyName("biometricAuthenticationBlocked")]
        public bool? BiometricAuthenticationBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets block after company portal update deferral in days.
        /// Maximum number of days Company Portal update can be deferred on the device or app access will be blocked.
        /// </summary>
        [JsonPropertyName("blockAfterCompanyPortalUpdateDeferralInDays")]
        public Int32? BlockAfterCompanyPortalUpdateDeferralInDays { get; set; }
    
        /// <summary>
        /// Gets or sets connect to vpn on launch.
        /// Whether the app should connect to the configured VPN on launch (Android only).
        /// </summary>
        [JsonPropertyName("connectToVpnOnLaunch")]
        public bool? ConnectToVpnOnLaunch { get; set; }
    
        /// <summary>
        /// Gets or sets custom browser display name.
        /// Friendly name of the preferred custom browser to open weblink on Android. (Android only)
        /// </summary>
        [JsonPropertyName("customBrowserDisplayName")]
        public string CustomBrowserDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets custom browser package id.
        /// Unique identifier of a custom browser to open weblink on Android. (Android only)
        /// </summary>
        [JsonPropertyName("customBrowserPackageId")]
        public string CustomBrowserPackageId { get; set; }
    
        /// <summary>
        /// Gets or sets custom browser protocol.
        /// A custom browser protocol to open weblink on iOS. (iOS only)
        /// </summary>
        [JsonPropertyName("customBrowserProtocol")]
        public string CustomBrowserProtocol { get; set; }
    
        /// <summary>
        /// Gets or sets custom dialer app display name.
        /// Friendly name of a custom dialer app to click-to-open a phone number on Android.
        /// </summary>
        [JsonPropertyName("customDialerAppDisplayName")]
        public string CustomDialerAppDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets custom dialer app package id.
        /// PackageId of a custom dialer app to click-to-open a phone number on Android.
        /// </summary>
        [JsonPropertyName("customDialerAppPackageId")]
        public string CustomDialerAppPackageId { get; set; }
    
        /// <summary>
        /// Gets or sets custom dialer app protocol.
        /// Protocol of a custom dialer app to click-to-open a phone number on iOS, for example, skype:.
        /// </summary>
        [JsonPropertyName("customDialerAppProtocol")]
        public string CustomDialerAppProtocol { get; set; }
    
        /// <summary>
        /// Gets or sets custom settings.
        /// A set of string key and string value pairs to be sent to the affected users, unalterned by this service
        /// </summary>
        [JsonPropertyName("customSettings")]
        public IEnumerable<KeyValuePair> CustomSettings { get; set; }
    
        /// <summary>
        /// Gets or sets deployed app count.
        /// Count of apps to which the current policy is deployed.
        /// </summary>
        [JsonPropertyName("deployedAppCount")]
        public Int32? DeployedAppCount { get; set; }
    
        /// <summary>
        /// Gets or sets device lock required.
        /// Defines if any kind of lock must be required on device. (android only)
        /// </summary>
        [JsonPropertyName("deviceLockRequired")]
        public bool? DeviceLockRequired { get; set; }
    
        /// <summary>
        /// Gets or sets disable app encryption if device encryption is enabled.
        /// When this setting is enabled, app level encryption is disabled if device level encryption is enabled. (Android only)
        /// </summary>
        [JsonPropertyName("disableAppEncryptionIfDeviceEncryptionIsEnabled")]
        public bool? DisableAppEncryptionIfDeviceEncryptionIsEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets disable protection of managed outbound open in data.
        /// Disable protection of data transferred to other apps through IOS OpenIn option. This setting is only allowed to be True when AllowedOutboundDataTransferDestinations is set to ManagedApps. (iOS Only)
        /// </summary>
        [JsonPropertyName("disableProtectionOfManagedOutboundOpenInData")]
        public bool? DisableProtectionOfManagedOutboundOpenInData { get; set; }
    
        /// <summary>
        /// Gets or sets encrypt app data.
        /// Indicates whether managed-app data should be encrypted. (Android only)
        /// </summary>
        [JsonPropertyName("encryptAppData")]
        public bool? EncryptAppData { get; set; }
    
        /// <summary>
        /// Gets or sets exempted app packages.
        /// Android App packages in this list will be exempt from the policy and will be able to receive data from managed apps. (Android only)
        /// </summary>
        [JsonPropertyName("exemptedAppPackages")]
        public IEnumerable<KeyValuePair> ExemptedAppPackages { get; set; }
    
        /// <summary>
        /// Gets or sets exempted app protocols.
        /// iOS Apps in this list will be exempt from the policy and will be able to receive data from managed apps. (iOS Only)
        /// </summary>
        [JsonPropertyName("exemptedAppProtocols")]
        public IEnumerable<KeyValuePair> ExemptedAppProtocols { get; set; }
    
        /// <summary>
        /// Gets or sets face id blocked.
        /// Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True. (iOS Only)
        /// </summary>
        [JsonPropertyName("faceIdBlocked")]
        public bool? FaceIdBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets filter open in to only managed apps.
        /// Defines if open-in operation is supported from the managed app to the filesharing locations selected. This setting only applies when AllowedOutboundDataTransferDestinations is set to ManagedApps and DisableProtectionOfManagedOutboundOpenInData is set to False. (iOS Only)
        /// </summary>
        [JsonPropertyName("filterOpenInToOnlyManagedApps")]
        public bool? FilterOpenInToOnlyManagedApps { get; set; }
    
        /// <summary>
        /// Gets or sets fingerprint and biometric enabled.
        /// Indicate to the client to enable both biometrics and fingerprints for the app.
        /// </summary>
        [JsonPropertyName("fingerprintAndBiometricEnabled")]
        public bool? FingerprintAndBiometricEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets minimum required company portal version.
        /// Minimum version of the Company portal that must be installed on the device or app access will be blocked
        /// </summary>
        [JsonPropertyName("minimumRequiredCompanyPortalVersion")]
        public string MinimumRequiredCompanyPortalVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum required patch version.
        /// Define the oldest required Android security patch level a user can have to gain secure access to the app. (Android only)
        /// </summary>
        [JsonPropertyName("minimumRequiredPatchVersion")]
        public string MinimumRequiredPatchVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum required sdk version.
        /// Versions less than the specified version will block the managed app from accessing company data. (iOS Only)
        /// </summary>
        [JsonPropertyName("minimumRequiredSdkVersion")]
        public string MinimumRequiredSdkVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum warning company portal version.
        /// Minimum version of the Company portal that must be installed on the device or the user will receive a warning
        /// </summary>
        [JsonPropertyName("minimumWarningCompanyPortalVersion")]
        public string MinimumWarningCompanyPortalVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum warning patch version.
        /// Define the oldest recommended Android security patch level a user can have for secure access to the app. (Android only)
        /// </summary>
        [JsonPropertyName("minimumWarningPatchVersion")]
        public string MinimumWarningPatchVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum warning sdk version.
        /// Versions less than the specified version will result in warning message on the managed app from accessing company data. (iOS only)
        /// </summary>
        [JsonPropertyName("minimumWarningSdkVersion")]
        public string MinimumWarningSdkVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum wipe company portal version.
        /// Minimum version of the Company portal that must be installed on the device or the company data on the app will be wiped
        /// </summary>
        [JsonPropertyName("minimumWipeCompanyPortalVersion")]
        public string MinimumWipeCompanyPortalVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum wipe patch version.
        /// Android security patch level  less than or equal to the specified value will wipe the managed app and the associated company data. (Android only)
        /// </summary>
        [JsonPropertyName("minimumWipePatchVersion")]
        public string MinimumWipePatchVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum wipe sdk version.
        /// Versions less than the specified version will block the managed app from accessing company data.
        /// </summary>
        [JsonPropertyName("minimumWipeSdkVersion")]
        public string MinimumWipeSdkVersion { get; set; }
    
        /// <summary>
        /// Gets or sets protect inbound data from unknown sources.
        /// Protect incoming data from unknown source. This setting is only allowed to be True when AllowedInboundDataTransferSources is set to AllApps. (iOS Only)
        /// </summary>
        [JsonPropertyName("protectInboundDataFromUnknownSources")]
        public bool? ProtectInboundDataFromUnknownSources { get; set; }
    
        /// <summary>
        /// Gets or sets require class3biometrics.
        /// Require user to apply Class 3 Biometrics on their Android device.
        /// </summary>
        [JsonPropertyName("requireClass3Biometrics")]
        public bool? RequireClass3Biometrics { get; set; }
    
        /// <summary>
        /// Gets or sets required android safety net apps verification type.
        /// Defines the Android SafetyNet Apps Verification requirement for a managed app to work. Possible values are: none, enabled.
        /// </summary>
        [JsonPropertyName("requiredAndroidSafetyNetAppsVerificationType")]
        public AndroidManagedAppSafetyNetAppsVerificationType? RequiredAndroidSafetyNetAppsVerificationType { get; set; }
    
        /// <summary>
        /// Gets or sets required android safety net device attestation type.
        /// Defines the Android SafetyNet Device Attestation requirement for a managed app to work. Possible values are: none, basicIntegrity, basicIntegrityAndDeviceCertification.
        /// </summary>
        [JsonPropertyName("requiredAndroidSafetyNetDeviceAttestationType")]
        public AndroidManagedAppSafetyNetDeviceAttestationType? RequiredAndroidSafetyNetDeviceAttestationType { get; set; }
    
        /// <summary>
        /// Gets or sets required android safety net evaluation type.
        /// Defines the Android SafetyNet evaluation type requirement for a managed app to work. (Android Only). Possible values are: basic, hardwareBacked.
        /// </summary>
        [JsonPropertyName("requiredAndroidSafetyNetEvaluationType")]
        public AndroidManagedAppSafetyNetEvaluationType? RequiredAndroidSafetyNetEvaluationType { get; set; }
    
        /// <summary>
        /// Gets or sets require pin after biometric change.
        /// A PIN prompt will override biometric prompts if class 3 biometrics are updated on the device.
        /// </summary>
        [JsonPropertyName("requirePinAfterBiometricChange")]
        public bool? RequirePinAfterBiometricChange { get; set; }
    
        /// <summary>
        /// Gets or sets screen capture blocked.
        /// Indicates whether screen capture is blocked. (Android only)
        /// </summary>
        [JsonPropertyName("screenCaptureBlocked")]
        public bool? ScreenCaptureBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets third party keyboards blocked.
        /// Defines if third party keyboards are allowed while accessing a managed app. (iOS Only)
        /// </summary>
        [JsonPropertyName("thirdPartyKeyboardsBlocked")]
        public bool? ThirdPartyKeyboardsBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets warn after company portal update deferral in days.
        /// Maximum number of days Company Portal update can be deferred on the device or the user will receive the warning
        /// </summary>
        [JsonPropertyName("warnAfterCompanyPortalUpdateDeferralInDays")]
        public Int32? WarnAfterCompanyPortalUpdateDeferralInDays { get; set; }
    
        /// <summary>
        /// Gets or sets wipe after company portal update deferral in days.
        /// Maximum number of days Company Portal update can be deferred on the device or the company data on the app will be wiped
        /// </summary>
        [JsonPropertyName("wipeAfterCompanyPortalUpdateDeferralInDays")]
        public Int32? WipeAfterCompanyPortalUpdateDeferralInDays { get; set; }
    
        /// <summary>
        /// Gets or sets apps.
        /// List of apps to which the policy is deployed.
        /// </summary>
        [JsonPropertyName("apps")]
        public IDefaultManagedAppProtectionAppsCollectionPage Apps { get; set; }

        /// <summary>
        /// Gets or sets appsNextLink.
        /// </summary>
        [JsonPropertyName("apps@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string AppsNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets deployment summary.
        /// Navigation property to deployment summary of the configuration.
        /// </summary>
        [JsonPropertyName("deploymentSummary")]
        public ManagedAppPolicyDeploymentSummary DeploymentSummary { get; set; }
    
    }
}

