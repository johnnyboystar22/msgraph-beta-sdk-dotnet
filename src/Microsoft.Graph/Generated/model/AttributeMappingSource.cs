// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type AttributeMappingSource.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<AttributeMappingSource>))]
    public partial class AttributeMappingSource
    {

        /// <summary>
        /// Gets or sets expression.
        /// Equivalent expression representation of this attributeMappingSource object.
        /// </summary>
        [JsonPropertyName("expression")]
        public string Expression { get; set; }
    
        /// <summary>
        /// Gets or sets name.
        /// Name parameter of the mapping source. Depending on the type property value, this can be the name of the function, the name of the source attribute, or a constant value to be used.
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }
    
        /// <summary>
        /// Gets or sets parameters.
        /// If this object represents a function, lists function parameters. Parameters consist of attributeMappingSource objects themselves, allowing for complex expressions. If type is not Function, this property will be null/empty array.
        /// </summary>
        [JsonPropertyName("parameters")]
        public IEnumerable<StringKeyAttributeMappingSourceValuePair> Parameters { get; set; }
    
        /// <summary>
        /// Gets or sets type.
        /// The type of this attribute mapping source. Possible values are: Attribute, Constant, Function. Default is Attribute.
        /// </summary>
        [JsonPropertyName("type")]
        public AttributeMappingSourceType? Type { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
