// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph.SecurityNamespace
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Intelligence Profile.
    /// </summary>
    [JsonConverter(typeof(Microsoft.Graph.DerivedTypeConverter<IntelligenceProfile>))]
    public partial class IntelligenceProfile : Microsoft.Graph.Entity
    {
    
        /// <summary>
        /// Gets or sets aliases.
        /// A list of commonly-known aliases for the threat intelligence included in the intelligenceProfile.
        /// </summary>
        [JsonPropertyName("aliases")]
        public IEnumerable<string> Aliases { get; set; }
    
        /// <summary>
        /// Gets or sets countries or regions of origin.
        /// The country/region of origin for the given actor or threat associated with this intelligenceProfile.
        /// </summary>
        [JsonPropertyName("countriesOrRegionsOfOrigin")]
        public IEnumerable<IntelligenceProfileCountryOrRegionOfOrigin> CountriesOrRegionsOfOrigin { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// A synopsis of the threat actor. This property places the threat actor in wider context, tracing its discovery, history, significant campaigns, targeting, techniques of note, affiliations with governments, law enforcement countermeasures, and any areas of dispute among the security community regarding attribution.
        /// </summary>
        [JsonPropertyName("description")]
        public FormattedContent Description { get; set; }
    
        /// <summary>
        /// Gets or sets first active date time.
        /// The date and time when this intelligenceProfile was first active.  The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [JsonPropertyName("firstActiveDateTime")]
        public DateTimeOffset? FirstActiveDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets kind.
        /// A categorization of the type of this intelligenceProfile. The possible values are: actor, tool, unknownFutureValue.
        /// </summary>
        [JsonPropertyName("kind")]
        public IntelligenceProfileKind? Kind { get; set; }
    
        /// <summary>
        /// Gets or sets summary.
        /// A short summary of this intelligenceProfile.
        /// </summary>
        [JsonPropertyName("summary")]
        public FormattedContent Summary { get; set; }
    
        /// <summary>
        /// Gets or sets targets.
        /// Known targets related to this intelligenceProfile.
        /// </summary>
        [JsonPropertyName("targets")]
        public IEnumerable<string> Targets { get; set; }
    
        /// <summary>
        /// Gets or sets title.
        /// The title of this intelligenceProfile.
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }
    
        /// <summary>
        /// Gets or sets tradecraft.
        /// Formatted information featuring a description of the distinctive tactics, techniques, and procedures (TTP) of the group, followed by a list of all known custom, commodity, and publicly available implants used by the group.
        /// </summary>
        [JsonPropertyName("tradecraft")]
        public FormattedContent Tradecraft { get; set; }
    
        /// <summary>
        /// Gets or sets indicators.
        /// Includes an assemblage of high-fidelity network indicators of compromise.
        /// </summary>
        [JsonPropertyName("indicators")]
        public IIntelligenceProfileIndicatorsCollectionWithReferencesPage Indicators { get; set; }

        /// <summary>
        /// Gets or sets indicatorsNextLink.
        /// </summary>
        [JsonPropertyName("indicators@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string IndicatorsNextLink { get; set; }
    
    }
}

