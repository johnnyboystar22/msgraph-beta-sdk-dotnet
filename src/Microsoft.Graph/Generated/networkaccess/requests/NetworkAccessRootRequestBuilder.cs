// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequestBuilder.cs.tt

namespace Microsoft.Graph.Networkaccess
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type NetworkAccessRootRequestBuilder.
    /// </summary>
    public partial class NetworkAccessRootRequestBuilder : Microsoft.Graph.EntityRequestBuilder, INetworkAccessRootRequestBuilder
    {

        /// <summary>
        /// Constructs a new NetworkAccessRootRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="Microsoft.Graph.IBaseClient"/> for handling requests.</param>
        public NetworkAccessRootRequestBuilder(
            string requestUrl,
            Microsoft.Graph.IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public new INetworkAccessRootRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public new INetworkAccessRootRequest Request(IEnumerable<Microsoft.Graph.Option> options)
        {
            return new NetworkAccessRootRequest(this.RequestUrl, this.Client, options);
        }
    
        /// <summary>
        /// Gets the request builder for Logs.
        /// </summary>
        /// <returns>The <see cref="ILogsRequestBuilder"/>.</returns>
        public ILogsRequestBuilder Logs
        {
            get
            {
                return new LogsRequestBuilder(this.AppendSegmentToRequestUrl("logs"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Reports.
        /// </summary>
        /// <returns>The <see cref="IReportsRequestBuilder"/>.</returns>
        public IReportsRequestBuilder Reports
        {
            get
            {
                return new ReportsRequestBuilder(this.AppendSegmentToRequestUrl("reports"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Connectivity.
        /// </summary>
        /// <returns>The <see cref="IConnectivityRequestBuilder"/>.</returns>
        public IConnectivityRequestBuilder Connectivity
        {
            get
            {
                return new ConnectivityRequestBuilder(this.AppendSegmentToRequestUrl("connectivity"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for ForwardingPolicies.
        /// </summary>
        /// <returns>The <see cref="INetworkAccessRootForwardingPoliciesCollectionRequestBuilder"/>.</returns>
        public INetworkAccessRootForwardingPoliciesCollectionRequestBuilder ForwardingPolicies
        {
            get
            {
                return new NetworkAccessRootForwardingPoliciesCollectionRequestBuilder(this.AppendSegmentToRequestUrl("forwardingPolicies"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for ForwardingProfiles.
        /// </summary>
        /// <returns>The <see cref="INetworkAccessRootForwardingProfilesCollectionRequestBuilder"/>.</returns>
        public INetworkAccessRootForwardingProfilesCollectionRequestBuilder ForwardingProfiles
        {
            get
            {
                return new NetworkAccessRootForwardingProfilesCollectionRequestBuilder(this.AppendSegmentToRequestUrl("forwardingProfiles"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Settings.
        /// </summary>
        /// <returns>The <see cref="ISettingsRequestBuilder"/>.</returns>
        public ISettingsRequestBuilder Settings
        {
            get
            {
                return new SettingsRequestBuilder(this.AppendSegmentToRequestUrl("settings"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for TenantStatus.
        /// </summary>
        /// <returns>The <see cref="ITenantStatusRequestBuilder"/>.</returns>
        public ITenantStatusRequestBuilder TenantStatus
        {
            get
            {
                return new TenantStatusRequestBuilder(this.AppendSegmentToRequestUrl("tenantStatus"), this.Client);
            }
        }
    
        /// <summary>
        /// Gets the request builder for NetworkAccessRootOnboard.
        /// </summary>
        /// <returns>The <see cref="INetworkAccessRootOnboardRequestBuilder"/>.</returns>
        public INetworkAccessRootOnboardRequestBuilder Onboard()
        {
            return new NetworkAccessRootOnboardRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.networkaccess.onboard"),
                this.Client);
        }
    
    }
}
