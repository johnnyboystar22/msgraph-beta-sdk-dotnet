// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph.Networkaccess
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type TunnelConfigurationIKEv2Custom.
    /// </summary>
    [JsonConverter(typeof(Microsoft.Graph.DerivedTypeConverter<TunnelConfigurationIKEv2Custom>))]
    public partial class TunnelConfigurationIKEv2Custom : TunnelConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TunnelConfigurationIKEv2Custom"/> class.
        /// </summary>
        public TunnelConfigurationIKEv2Custom()
        {
            this.ODataType = "microsoft.graph.networkaccess.tunnelConfigurationIKEv2Custom";
        }

        /// <summary>
        /// Gets or sets dhGroup.
        /// Specifies the DH group identifier for IPSec SA negotiation. The possible values are: dhGroup14, dhGroup24, dhGroup2048, ecp256, ecp384.
        /// </summary>
        [JsonPropertyName("dhGroup")]
        public DhGroup? DhGroup { get; set; }
    
        /// <summary>
        /// Gets or sets ikeEncryption.
        /// Specifies the IKE encryption protocol. The possible values are: aes128, aes192, aes256, gcmAes128, gcmAes256.
        /// </summary>
        [JsonPropertyName("ikeEncryption")]
        public IkeEncryption? IkeEncryption { get; set; }
    
        /// <summary>
        /// Gets or sets ikeIntegrity.
        /// Specifies the integration properties of the IKE protocol. The possible values are: sha256, sha384, gcmAes128, gcmAes256.
        /// </summary>
        [JsonPropertyName("ikeIntegrity")]
        public IkeIntegrity? IkeIntegrity { get; set; }
    
        /// <summary>
        /// Gets or sets ipSecEncryption.
        /// Specifies the encryption protocol used for the IPSec tunnel. The possible values are: none, gcmAes128, gcmAes192, gcmAes256.
        /// </summary>
        [JsonPropertyName("ipSecEncryption")]
        public IpSecEncryption? IpSecEncryption { get; set; }
    
        /// <summary>
        /// Gets or sets ipSecIntegrity.
        /// Specifies the integrity properties of the IPSec protocol. The possible values are: gcmAes128, gcmAes192, gcmAes256, sha256.
        /// </summary>
        [JsonPropertyName("ipSecIntegrity")]
        public IpSecIntegrity? IpSecIntegrity { get; set; }
    
        /// <summary>
        /// Gets or sets pfsGroup.
        /// Specifies the Phase 2 DH group identifier for IPSec SA negotiation. The possible values are: none, pfs1, pfs2, pfs14, pfs24, pfs2048, pfsmm, ecp256, ecp384.
        /// </summary>
        [JsonPropertyName("pfsGroup")]
        public PfsGroup? PfsGroup { get; set; }
    
        /// <summary>
        /// Gets or sets saLifeTimeSeconds.
        /// a standard specifiying Security Association lifetime with recommended values from an RFC standard.
        /// </summary>
        [JsonPropertyName("saLifeTimeSeconds")]
        public Int64? SaLifeTimeSeconds { get; set; }
    
    }
}
