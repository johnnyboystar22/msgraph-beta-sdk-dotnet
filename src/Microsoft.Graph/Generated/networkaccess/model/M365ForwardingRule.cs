// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph.Networkaccess
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type M365Forwarding Rule.
    /// </summary>
    [JsonConverter(typeof(Microsoft.Graph.DerivedTypeConverter<M365ForwardingRule>))]
    public partial class M365ForwardingRule : ForwardingRule
    {
    
        ///<summary>
        /// The M365ForwardingRule constructor
        ///</summary>
        public M365ForwardingRule()
        {
            this.ODataType = "microsoft.graph.networkaccess.m365ForwardingRule";
        }

        /// <summary>
        /// Gets or sets category.
        /// Defines the category of Office 365 traffic used by a forwarding rule for M365 traffic (e.g., optimized traffic)    .The possible values are: default, optimized, allow.
        /// </summary>
        [JsonPropertyName("category")]
        public ForwardingCategory? Category { get; set; }
    
        /// <summary>
        /// Gets or sets ports.
        /// The port(s) used by a forwarding rule for M365 traffic are specified to determine the specific network port(s) through which the Microsoft 365 traffic is directed and forwarded.
        /// </summary>
        [JsonPropertyName("ports")]
        public IEnumerable<string> Ports { get; set; }
    
        /// <summary>
        /// Gets or sets protocol.
        /// Defines the networking protocol type used by a forwarding rule for M365 traffic    .The possible values are: ip, icmp, igmp, ggp, ipv4, tcp, pup, udp, idp, ipv6, ipv6RoutingHeader, ipv6FragmentHeader, ipSecEncapsulatingSecurityPayload, ipSecAuthenticationHeader, icmpV6, ipv6NoNextHeader, ipv6DestinationOptions, nd, raw, ipx, spx, spxII
        /// </summary>
        [JsonPropertyName("protocol")]
        public NetworkingProtocol? Protocol { get; set; }
    
    }
}

