// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type VirtualEndpointRequest.
    /// </summary>
    public partial class VirtualEndpointRequest : BaseRequest, IVirtualEndpointRequest
    {
        /// <summary>
        /// Constructs a new VirtualEndpointRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public VirtualEndpointRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified VirtualEndpoint using POST.
        /// </summary>
        /// <param name="virtualEndpointToCreate">The VirtualEndpoint to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created VirtualEndpoint.</returns>
        public async System.Threading.Tasks.Task<VirtualEndpoint> CreateAsync(VirtualEndpoint virtualEndpointToCreate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            var newEntity = await this.SendAsync<VirtualEndpoint>(virtualEndpointToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Creates the specified VirtualEndpoint using POST and returns a <see cref="GraphResponse{VirtualEndpoint}"/> object.
        /// </summary>
        /// <param name="virtualEndpointToCreate">The VirtualEndpoint to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{VirtualEndpoint}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<VirtualEndpoint>> CreateResponseAsync(VirtualEndpoint virtualEndpointToCreate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            return this.SendAsyncWithGraphResponse<VirtualEndpoint>(virtualEndpointToCreate, cancellationToken);
        }

        /// <summary>
        /// Deletes the specified VirtualEndpoint.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.DELETE;
            await this.SendAsync<VirtualEndpoint>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes the specified VirtualEndpoint and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        public System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.DELETE;
            return this.SendAsyncWithGraphResponse(null, cancellationToken);
        }

        /// <summary>
        /// Gets the specified VirtualEndpoint.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The VirtualEndpoint.</returns>
        public async System.Threading.Tasks.Task<VirtualEndpoint> GetAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            var retrievedEntity = await this.SendAsync<VirtualEndpoint>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Gets the specified VirtualEndpoint and returns a <see cref="GraphResponse{VirtualEndpoint}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{VirtualEndpoint}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<VirtualEndpoint>> GetResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            return this.SendAsyncWithGraphResponse<VirtualEndpoint>(null, cancellationToken);
        }

        /// <summary>
        /// Updates the specified VirtualEndpoint using PATCH.
        /// </summary>
        /// <param name="virtualEndpointToUpdate">The VirtualEndpoint to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated VirtualEndpoint.</returns>
        public async System.Threading.Tasks.Task<VirtualEndpoint> UpdateAsync(VirtualEndpoint virtualEndpointToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            var updatedEntity = await this.SendAsync<VirtualEndpoint>(virtualEndpointToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified VirtualEndpoint using PATCH and returns a <see cref="GraphResponse{VirtualEndpoint}"/> object.
        /// </summary>
        /// <param name="virtualEndpointToUpdate">The VirtualEndpoint to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{VirtualEndpoint}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<VirtualEndpoint>> UpdateResponseAsync(VirtualEndpoint virtualEndpointToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            return this.SendAsyncWithGraphResponse<VirtualEndpoint>(virtualEndpointToUpdate, cancellationToken);
        }

        /// <summary>
        /// Updates the specified VirtualEndpoint using PUT.
        /// </summary>
        /// <param name="virtualEndpointToUpdate">The VirtualEndpoint object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task<VirtualEndpoint> PutAsync(VirtualEndpoint virtualEndpointToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            var updatedEntity = await this.SendAsync<VirtualEndpoint>(virtualEndpointToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified VirtualEndpoint using PUT and returns a <see cref="GraphResponse{VirtualEndpoint}"/> object.
        /// </summary>
        /// <param name="virtualEndpointToUpdate">The VirtualEndpoint object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await of <see cref="GraphResponse{VirtualEndpoint}"/>.</returns>
        public System.Threading.Tasks.Task<GraphResponse<VirtualEndpoint>> PutResponseAsync(VirtualEndpoint virtualEndpointToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            return this.SendAsyncWithGraphResponse<VirtualEndpoint>(virtualEndpointToUpdate, cancellationToken);
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IVirtualEndpointRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public IVirtualEndpointRequest Expand(Expression<Func<VirtualEndpoint, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IVirtualEndpointRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public IVirtualEndpointRequest Select(Expression<Func<VirtualEndpoint, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="virtualEndpointToInitialize">The <see cref="VirtualEndpoint"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(VirtualEndpoint virtualEndpointToInitialize)
        {

            if (virtualEndpointToInitialize != null)
            {
                if (virtualEndpointToInitialize.AuditEvents != null && virtualEndpointToInitialize.AuditEvents.CurrentPage != null)
                {
                    virtualEndpointToInitialize.AuditEvents.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.AuditEventsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.AuditEvents.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.BulkActions != null && virtualEndpointToInitialize.BulkActions.CurrentPage != null)
                {
                    virtualEndpointToInitialize.BulkActions.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.BulkActionsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.BulkActions.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.CloudPCs != null && virtualEndpointToInitialize.CloudPCs.CurrentPage != null)
                {
                    virtualEndpointToInitialize.CloudPCs.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.CloudPCsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.CloudPCs.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.DeviceImages != null && virtualEndpointToInitialize.DeviceImages.CurrentPage != null)
                {
                    virtualEndpointToInitialize.DeviceImages.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.DeviceImagesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.DeviceImages.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.ExternalPartnerSettings != null && virtualEndpointToInitialize.ExternalPartnerSettings.CurrentPage != null)
                {
                    virtualEndpointToInitialize.ExternalPartnerSettings.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.ExternalPartnerSettingsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.ExternalPartnerSettings.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.FrontLineServicePlans != null && virtualEndpointToInitialize.FrontLineServicePlans.CurrentPage != null)
                {
                    virtualEndpointToInitialize.FrontLineServicePlans.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.FrontLineServicePlansNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.FrontLineServicePlans.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.GalleryImages != null && virtualEndpointToInitialize.GalleryImages.CurrentPage != null)
                {
                    virtualEndpointToInitialize.GalleryImages.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.GalleryImagesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.GalleryImages.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.OnPremisesConnections != null && virtualEndpointToInitialize.OnPremisesConnections.CurrentPage != null)
                {
                    virtualEndpointToInitialize.OnPremisesConnections.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.OnPremisesConnectionsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.OnPremisesConnections.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.ProvisioningPolicies != null && virtualEndpointToInitialize.ProvisioningPolicies.CurrentPage != null)
                {
                    virtualEndpointToInitialize.ProvisioningPolicies.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.ProvisioningPoliciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.ProvisioningPolicies.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.ServicePlans != null && virtualEndpointToInitialize.ServicePlans.CurrentPage != null)
                {
                    virtualEndpointToInitialize.ServicePlans.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.ServicePlansNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.ServicePlans.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.SharedUseServicePlans != null && virtualEndpointToInitialize.SharedUseServicePlans.CurrentPage != null)
                {
                    virtualEndpointToInitialize.SharedUseServicePlans.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.SharedUseServicePlansNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.SharedUseServicePlans.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.Snapshots != null && virtualEndpointToInitialize.Snapshots.CurrentPage != null)
                {
                    virtualEndpointToInitialize.Snapshots.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.SnapshotsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.Snapshots.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.SupportedRegions != null && virtualEndpointToInitialize.SupportedRegions.CurrentPage != null)
                {
                    virtualEndpointToInitialize.SupportedRegions.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.SupportedRegionsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.SupportedRegions.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }
                if (virtualEndpointToInitialize.UserSettings != null && virtualEndpointToInitialize.UserSettings.CurrentPage != null)
                {
                    virtualEndpointToInitialize.UserSettings.InitializeNextPageRequest(this.Client, virtualEndpointToInitialize.UserSettingsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    virtualEndpointToInitialize.UserSettings.AdditionalData = virtualEndpointToInitialize.AdditionalData;
                }

            }


        }
    }
}
