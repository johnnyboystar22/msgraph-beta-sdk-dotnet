// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface IVirtualEventRegistrationQuestionRequest.
    /// </summary>
    public partial interface IVirtualEventRegistrationQuestionRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified VirtualEventRegistrationQuestion using POST.
        /// </summary>
        /// <param name="virtualEventRegistrationQuestionToCreate">The VirtualEventRegistrationQuestion to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created VirtualEventRegistrationQuestion.</returns>
        System.Threading.Tasks.Task<VirtualEventRegistrationQuestion> CreateAsync(VirtualEventRegistrationQuestion virtualEventRegistrationQuestionToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates the specified VirtualEventRegistrationQuestion using POST and returns a <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object.
        /// </summary>
        /// <param name="virtualEventRegistrationQuestionToCreate">The VirtualEventRegistrationQuestion to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<VirtualEventRegistrationQuestion>> CreateResponseAsync(VirtualEventRegistrationQuestion virtualEventRegistrationQuestionToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified VirtualEventRegistrationQuestion.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified VirtualEventRegistrationQuestion and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified VirtualEventRegistrationQuestion.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The VirtualEventRegistrationQuestion.</returns>
        System.Threading.Tasks.Task<VirtualEventRegistrationQuestion> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified VirtualEventRegistrationQuestion and returns a <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<VirtualEventRegistrationQuestion>> GetResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified VirtualEventRegistrationQuestion using PATCH.
        /// </summary>
        /// <param name="virtualEventRegistrationQuestionToUpdate">The VirtualEventRegistrationQuestion to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated VirtualEventRegistrationQuestion.</returns>
        System.Threading.Tasks.Task<VirtualEventRegistrationQuestion> UpdateAsync(VirtualEventRegistrationQuestion virtualEventRegistrationQuestionToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified VirtualEventRegistrationQuestion using PATCH and returns a <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object.
        /// </summary>
        /// <param name="virtualEventRegistrationQuestionToUpdate">The VirtualEventRegistrationQuestion to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<VirtualEventRegistrationQuestion>> UpdateResponseAsync(VirtualEventRegistrationQuestion virtualEventRegistrationQuestionToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified VirtualEventRegistrationQuestion using PUT.
        /// </summary>
        /// <param name="virtualEventRegistrationQuestionToUpdate">The VirtualEventRegistrationQuestion object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task<VirtualEventRegistrationQuestion> PutAsync(VirtualEventRegistrationQuestion virtualEventRegistrationQuestionToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified VirtualEventRegistrationQuestion using PUT and returns a <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> object.
        /// </summary>
        /// <param name="virtualEventRegistrationQuestionToUpdate">The VirtualEventRegistrationQuestion object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse{VirtualEventRegistrationQuestion}"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse<VirtualEventRegistrationQuestion>> PutResponseAsync(VirtualEventRegistrationQuestion virtualEventRegistrationQuestionToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        IVirtualEventRegistrationQuestionRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        IVirtualEventRegistrationQuestionRequest Expand(Expression<Func<VirtualEventRegistrationQuestion, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IVirtualEventRegistrationQuestionRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        IVirtualEventRegistrationQuestionRequest Select(Expression<Func<VirtualEventRegistrationQuestion, object>> selectExpression);

    }
}
