// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface ISequentialActivationRenewalsAlertIncidentRequest.
    /// </summary>
    public partial interface ISequentialActivationRenewalsAlertIncidentRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified SequentialActivationRenewalsAlertIncident using POST.
        /// </summary>
        /// <param name="sequentialActivationRenewalsAlertIncidentToCreate">The SequentialActivationRenewalsAlertIncident to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created SequentialActivationRenewalsAlertIncident.</returns>
        System.Threading.Tasks.Task<SequentialActivationRenewalsAlertIncident> CreateAsync(SequentialActivationRenewalsAlertIncident sequentialActivationRenewalsAlertIncidentToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates the specified SequentialActivationRenewalsAlertIncident using POST and returns a <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object.
        /// </summary>
        /// <param name="sequentialActivationRenewalsAlertIncidentToCreate">The SequentialActivationRenewalsAlertIncident to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<SequentialActivationRenewalsAlertIncident>> CreateResponseAsync(SequentialActivationRenewalsAlertIncident sequentialActivationRenewalsAlertIncidentToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified SequentialActivationRenewalsAlertIncident.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified SequentialActivationRenewalsAlertIncident and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified SequentialActivationRenewalsAlertIncident.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The SequentialActivationRenewalsAlertIncident.</returns>
        System.Threading.Tasks.Task<SequentialActivationRenewalsAlertIncident> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified SequentialActivationRenewalsAlertIncident and returns a <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<SequentialActivationRenewalsAlertIncident>> GetResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified SequentialActivationRenewalsAlertIncident using PATCH.
        /// </summary>
        /// <param name="sequentialActivationRenewalsAlertIncidentToUpdate">The SequentialActivationRenewalsAlertIncident to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated SequentialActivationRenewalsAlertIncident.</returns>
        System.Threading.Tasks.Task<SequentialActivationRenewalsAlertIncident> UpdateAsync(SequentialActivationRenewalsAlertIncident sequentialActivationRenewalsAlertIncidentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified SequentialActivationRenewalsAlertIncident using PATCH and returns a <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object.
        /// </summary>
        /// <param name="sequentialActivationRenewalsAlertIncidentToUpdate">The SequentialActivationRenewalsAlertIncident to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<SequentialActivationRenewalsAlertIncident>> UpdateResponseAsync(SequentialActivationRenewalsAlertIncident sequentialActivationRenewalsAlertIncidentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified SequentialActivationRenewalsAlertIncident using PUT.
        /// </summary>
        /// <param name="sequentialActivationRenewalsAlertIncidentToUpdate">The SequentialActivationRenewalsAlertIncident object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task<SequentialActivationRenewalsAlertIncident> PutAsync(SequentialActivationRenewalsAlertIncident sequentialActivationRenewalsAlertIncidentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified SequentialActivationRenewalsAlertIncident using PUT and returns a <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> object.
        /// </summary>
        /// <param name="sequentialActivationRenewalsAlertIncidentToUpdate">The SequentialActivationRenewalsAlertIncident object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse{SequentialActivationRenewalsAlertIncident}"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse<SequentialActivationRenewalsAlertIncident>> PutResponseAsync(SequentialActivationRenewalsAlertIncident sequentialActivationRenewalsAlertIncidentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        ISequentialActivationRenewalsAlertIncidentRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        ISequentialActivationRenewalsAlertIncidentRequest Expand(Expression<Func<SequentialActivationRenewalsAlertIncident, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        ISequentialActivationRenewalsAlertIncidentRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        ISequentialActivationRenewalsAlertIncidentRequest Select(Expression<Func<SequentialActivationRenewalsAlertIncident, object>> selectExpression);

    }
}
